#ifndef ENCODER_HPP
#define ENCODER_HPP

#include <cstdint>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

#define DEFAULT_SYMBOL_NUMBER 1
#define DEFAULT_MODULE_SIZE 12
#define DEFAULT_COLOR_NUMBER 8
#define DEFAULT_MODULE_COLOR_MODE 2
#define DEFAULT_ECC_LEVEL 3
#define DEFAULT_MASKING_REFERENCE 7

#define MAX_SYMBOL_NUMBER 61
#define MAX_COLOR_NUMBER 256
#define MAX_SIZE_ENCODING_MODE 256
#define ENCODING_MODES 6
#define ENC_MAX 1000000
#define NUMBER_OF_MASK_PATTERNS 8

#define MASTER_METADATA_PART1_LENGTH 6
#define MASTER_METADATA_PART2_LENGTH 38
#define MASTER_METADATA_PART1_MODULE_NUMBER 4

#define DISTANCE_TO_BORDER 4
#define MAX_ALIGNMENT_NUMBER 9
#define COLOR_PALETTE_NUMBER 4

#define VERSION2SIZE(x) (x * 4 + 17)
#define SIZE2VERSION(x) ((x - 17) / 4)
#define MAX(a, b) ({__typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a > _b ? _a : _b; })
#define MIN(a, b) ({__typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a < _b ? _a : _b; })

struct rgb
{
    uint8_t R;
    uint8_t G;
    uint8_t B;
    constexpr rgb(uint8_t a, uint8_t b, uint8_t c) : R(a), G(b), B(c) {}
};

struct vector2d
{
    int x;
    int y;
};

struct bitmap
{
    int width;
    int height;
    int bits_per_pixel;
    int bits_per_channel;
    int channel_count;
    std::vector<uint8_t> pixel;
};

constexpr rgb black(0, 0, 0);
constexpr rgb blue(0, 0, 255);
constexpr rgb green(0, 255, 0);
constexpr rgb cyan(0, 255, 255);
constexpr rgb red(255, 0, 0);
constexpr rgb magenta(255, 0, 255);
constexpr rgb yellow(255, 255, 0);
constexpr rgb white(255, 255, 255);

constexpr int modeSwitch[7][16] =
    {{-1, 28, 29, -1, -1, 30, -1, -1, -1, -1, 27, 125, -1, 124, 126, -1},
     {126, -1, 29, -1, -1, 30, -1, 28, -1, 127, 27, 125, -1, 124, -1, 127},
     {14, 63, -1, -1, -1, 478, -1, 62, -1, -1, 13, 61, -1, 60, -1, -1},
     {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
     {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
     {255, 8188, 8189, -1, -1, -1, -1, -1, -1, -1, 254, 253, -1, 252, -1, -1},
     {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};

constexpr int characterSize[] = {5, 5, 4, 4, 5, 6, 8};

constexpr int latchShiftTo[14][14] =
    {{0, 5, 5, ENC_MAX, ENC_MAX, 5, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 5, 7, ENC_MAX, 11},
     {7, 0, 5, ENC_MAX, ENC_MAX, 5, ENC_MAX, 5, ENC_MAX, ENC_MAX, 5, 7, ENC_MAX, 11},
     {4, 6, 0, ENC_MAX, ENC_MAX, 9, ENC_MAX, 6, ENC_MAX, ENC_MAX, 4, 6, ENC_MAX, 10},
     {ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 0, 0, 0, ENC_MAX, ENC_MAX, 0, ENC_MAX},
     {ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 0, 0, 0, ENC_MAX, ENC_MAX, 0, ENC_MAX},
     {8, 13, 13, ENC_MAX, ENC_MAX, 0, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 8, 8, ENC_MAX, 12},
     {ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 0, 0, 0, 0, ENC_MAX, ENC_MAX, 0, 0},
     {0, 5, 5, ENC_MAX, ENC_MAX, 5, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 5, 7, ENC_MAX, 11},
     {7, 0, 5, ENC_MAX, ENC_MAX, 5, ENC_MAX, 5, ENC_MAX, ENC_MAX, 5, 7, ENC_MAX, 11},
     {4, 6, 0, ENC_MAX, ENC_MAX, 9, ENC_MAX, 6, ENC_MAX, ENC_MAX, 4, 6, ENC_MAX, 10},
     {ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 0, 0, 0, ENC_MAX, ENC_MAX, 0, ENC_MAX},
     {ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 0, 0, 0, ENC_MAX, ENC_MAX, 0, ENC_MAX},
     {8, 13, 13, ENC_MAX, ENC_MAX, 0, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 8, 8, ENC_MAX, 12},
     {ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, ENC_MAX, 0, 0, 0, 0, ENC_MAX, ENC_MAX, 0, 0}}; // First latch then shift

constexpr vector2d symbolPos[MAX_SYMBOL_NUMBER] =
    {{0, 0},
     {0, -1},
     {0, 1},
     {-1, 0},
     {1, 0},
     {0, -2},
     {-1, -1},
     {1, -1},
     {0, 2},
     {-1, 1},
     {1, 1},
     {-2, 0},
     {2, 0},
     {0, -3},
     {-1, -2},
     {1, -2},
     {-2, -1},
     {2, -1},
     {0, 3},
     {-1, 2},
     {1, 2},
     {-2, 1},
     {2, 1},
     {-3, 0},
     {3, 0},
     {0, -4},
     {-1, -3},
     {1, -3},
     {-2, -2},
     {2, -2},
     {-3, -1},
     {3, -1},
     {0, 4},
     {-1, 3},
     {1, 3},
     {-2, 2},
     {2, 2},
     {-3, 1},
     {3, 1},
     {-4, 0},
     {4, 0},
     {0, -5},
     {-1, -4},
     {1, -4},
     {-2, -3},
     {2, -3},
     {-3, -2},
     {3, -2},
     {-4, -1},
     {4, -1},
     {0, 5},
     {-1, 4},
     {1, 4},
     {-2, 3},
     {2, 3},
     {-3, 2},
     {3, 2},
     {-4, 1},
     {4, 1},
     {-5, 0},
     {5, 0}};

constexpr int encodingTable[MAX_SIZE_ENCODING_MODE][ENCODING_MODES] =
    {
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 16, -1},
        {-1, -1, -1, -1, 17, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -19, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {0, 0, 0, -1, -1, 0},
        {-1, -1, -1, 0, -1, -1},
        {-1, -1, -1, 1, -1, -1},
        {-1, -1, -1, -1, 0, -1},
        {-1, -1, -1, 2, -1, -1},
        {-1, -1, -1, 3, -1, -1},
        {-1, -1, -1, 4, -1, -1},
        {-1, -1, -1, 5, -1, -1},
        {-1, -1, -1, 6, -1, -1},
        {-1, -1, -1, 7, -1, -1},
        {-1, -1, -1, -1, 1, -1},
        {-1, -1, -1, -1, 2, -1},
        {-1, -1, 11, 8, -20, -1},
        {-1, -1, -1, 9, -1, -1},
        {-1, -1, 12, 10, -21, -1},
        {-1, -1, -1, 11, -1, -1},
        {-1, -1, 1, -1, -1, 1},
        {-1, -1, 2, -1, -1, 2},
        {-1, -1, 3, -1, -1, 3},
        {-1, -1, 4, -1, -1, 4},
        {-1, -1, 5, -1, -1, 5},
        {-1, -1, 6, -1, -1, 6},
        {-1, -1, 7, -1, -1, 7},
        {-1, -1, 8, -1, -1, 8},
        {-1, -1, 9, -1, -1, 9},
        {-1, -1, 10, -1, -1, 10},
        {-1, -1, -1, 12, -22, -1},
        {-1, -1, -1, 13, -1, -1},
        {-1, -1, -1, -1, 3, -1},
        {-1, -1, -1, -1, 4, -1},
        {-1, -1, -1, -1, 5, -1},
        {-1, -1, -1, 14, -1, -1},
        {-1, -1, -1, 15, -1, -1},
        {1, -1, -1, -1, -1, 11},
        {2, -1, -1, -1, -1, 12},
        {3, -1, -1, -1, -1, 13},
        {4, -1, -1, -1, -1, 14},
        {5, -1, -1, -1, -1, 15},
        {6, -1, -1, -1, -1, 16},
        {7, -1, -1, -1, -1, 17},
        {8, -1, -1, -1, -1, 18},
        {9, -1, -1, -1, -1, 19},
        {10, -1, -1, -1, -1, 20},
        {11, -1, -1, -1, -1, 21},
        {12, -1, -1, -1, -1, 22},
        {13, -1, -1, -1, -1, 23},
        {14, -1, -1, -1, -1, 24},
        {15, -1, -1, -1, -1, 25},
        {16, -1, -1, -1, -1, 26},
        {17, -1, -1, -1, -1, 27},
        {18, -1, -1, -1, -1, 28},
        {19, -1, -1, -1, -1, 29},
        {20, -1, -1, -1, -1, 30},
        {21, -1, -1, -1, -1, 31},
        {22, -1, -1, -1, -1, 32},
        {23, -1, -1, -1, -1, 33},
        {24, -1, -1, -1, -1, 34},
        {25, -1, -1, -1, -1, 35},
        {26, -1, -1, -1, -1, 36},
        {-1, -1, -1, -1, 6, -1},
        {-1, -1, -1, -1, 7, -1},
        {-1, -1, -1, -1, 8, -1},
        {-1, -1, -1, -1, 9, -1},
        {-1, -1, -1, -1, 10, -1},
        {-1, -1, -1, -1, 11, -1},
        {-1, 1, -1, -1, -1, 37},
        {-1, 2, -1, -1, -1, 38},
        {-1, 3, -1, -1, -1, 39},
        {-1, 4, -1, -1, -1, 40},
        {-1, 5, -1, -1, -1, 41},
        {-1, 6, -1, -1, -1, 42},
        {-1, 7, -1, -1, -1, 43},
        {-1, 8, -1, -1, -1, 44},
        {-1, 9, -1, -1, -1, 45},
        {-1, 10, -1, -1, -1, 46},
        {-1, 11, -1, -1, -1, 47},
        {-1, 12, -1, -1, -1, 48},
        {-1, 13, -1, -1, -1, 49},
        {-1, 14, -1, -1, -1, 50},
        {-1, 15, -1, -1, -1, 51},
        {-1, 16, -1, -1, -1, 52},
        {-1, 17, -1, -1, -1, 53},
        {-1, 18, -1, -1, -1, 54},
        {-1, 19, -1, -1, -1, 55},
        {-1, 20, -1, -1, -1, 56},
        {-1, 21, -1, -1, -1, 57},
        {-1, 22, -1, -1, -1, 58},
        {-1, 23, -1, -1, -1, 59},
        {-1, 24, -1, -1, -1, 60},
        {-1, 25, -1, -1, -1, 61},
        {-1, 26, -1, -1, -1, 62},
        {-1, -1, -1, -1, 12, -1},
        {-1, -1, -1, -1, 13, -1},
        {-1, -1, -1, -1, 14, -1},
        {-1, -1, -1, -1, 15, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 23, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 24, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 25, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 26, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 27, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 28, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 29, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 30, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, 31, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1}};

constexpr int apNum[32] = {2, 2, 2, 2, 2,
                           3, 3, 3, 3,
                           4, 4, 4, 4,
                           5, 5, 5, 5,
                           6, 6, 6, 6,
                           7, 7, 7, 7,
                           8, 8, 8, 8,
                           9, 9, 9};

class symbol;

class encode
{
private:
    void setDefaultPalette(int color_number, std::vector<rgb> &palette);
    void setDefaultEccLevels(int symbol_number, std::vector<uint8_t> &ecc_levels);
    void swap_byte(uint8_t *a, uint8_t *b);
    void swap_int(int *a, int *b);
    // void convert_dec_to_bin(int dec, std::vector<bool> &bin, int start_position, int length);

public:
    int colorNumber;
    int symbolNumber;
    int moduleSize{DEFAULT_MODULE_SIZE};
    int masterSymbolWidth{0};
    int masterSymbolHeight{0};
    std::vector<rgb> palette;
    std::vector<vector2d> symbolVersions;
    std::vector<uint8_t> symbolEccLevels;
    std::vector<int> symbolPositions;
    std::vector<symbol> symbols;
    std::vector<bitmap> bitmaps;
    std::vector<int> analyzeInputData(std::string &input, int *encoded_length);
    encode(int color_number, int symbol_number);
    ~encode();
};

class symbol
{
    friend class encode;

public:
    int index;
    vector2d side_size;
    int host;
    int slaves[4];
    int wcwr[2];
    std::string data;
    std::vector<uint8_t> dataMap;
    std::string metadata;
    std::vector<uint8_t> matrix;
};

#endif